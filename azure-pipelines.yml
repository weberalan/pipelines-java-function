# at the top of your YAML file 
# set some variables that you'll need when you deploy
variables:
  # the name of the service connection that you created above
  serviceConnectionToAzure: Azure_test_service_connection
  # the name of your web app here is the same one you used above
  # when you created the web app using the Azure CLI
  appName: first-pipelines-java-function
  # the name of your functionApp is what you provided as
  # stagingDirectory in pom.xml
  functionAppName: 'first-pipelines-java-function'

# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  tags:
    include:
    - 'v*'
  branches:
    exclude:
    - master
    - dev

pool:
  vmImage: ubuntu-latest

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

# ...
# add these as the last steps
# to deploy to your app service
- task: CopyFiles@2
  displayName: Copy Files
  inputs:
    SourceFolder: $(system.defaultworkingdirectory)/target/azure-functions/$(functionAppName)/
    Contents: '**'
    TargetFolder: $(build.artifactstagingdirectory)

- task: ArchiveFiles@2
  inputs:
   rootFolderOrFile: '$(build.artifactstagingdirectory)'
   includeRootFolder: false
   archiveType: 'zip'
   archiveFile: $(build.artifactstagingdirectory)/$(appName).zip  
   replaceExistingArchive: true
   displayName: Archive files

- task: AzureFunctionApp@1
  displayName: Azure Function App deploy
  inputs:
    azureSubscription: $(serviceConnectionToAzure)
    appType: functionApp
    appName: $(appName)
    package: $(build.artifactstagingdirectory)/$(appName).zip